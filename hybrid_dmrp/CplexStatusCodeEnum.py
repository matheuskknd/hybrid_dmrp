#!/usr/bin/env python3.10
# -*- coding: UTF-8 -*-

from docplex.mp.engine import JobSolveStatus
from enum import Enum


# Ref: https://www.ibm.com/docs/en/icos/20.1.0?topic=micclcarm-solution-status-codes-by-number-in-cplex-callable-library-c-api
class CplexStatusCodeEnum(Enum):
  CPX_STAT_OPTIMAL = 1
  CPX_STAT_UNBOUNDED = 2
  CPX_STAT_INFEASIBLE = 3
  CPX_STAT_INForUNBD = 4
  CPX_STAT_OPTIMAL_INFEAS = 5
  CPX_STAT_NUM_BEST = 6
  CPX_STAT_ABORT_IT_LIM = 10
  CPX_STAT_ABORT_TIME_LIM = 11
  CPX_STAT_ABORT_OBJ_LIM = 12
  CPX_STAT_ABORT_USER = 13
  CPX_STAT_FEASIBLE_RELAXED_SUM = 14
  CPX_STAT_OPTIMAL_RELAXED_SUM = 15
  CPX_STAT_FEASIBLE_RELAXED_INF = 16
  CPX_STAT_OPTIMAL_RELAXED_INF = 17
  CPX_STAT_FEASIBLE_RELAXED_QUAD = 18
  CPX_STAT_OPTIMAL_RELAXED_QUAD = 19
  CPX_STAT_OPTIMAL_FACE_UNBOUNDED = 20
  CPX_STAT_ABORT_PRIM_OBJ_LIM = 21
  CPX_STAT_ABORT_DUAL_OBJ_LIM = 22
  CPX_STAT_FEASIBLE = 23
  CPX_STAT_FIRSTORDER = 24
  CPX_STAT_ABORT_DETTIME_LIM = 25
  CPX_STAT_CONFLICT_FEASIBLE = 30
  CPX_STAT_CONFLICT_MINIMAL = 31
  CPX_STAT_CONFLICT_ABORT_CONTRADICTION = 32
  CPX_STAT_CONFLICT_ABORT_TIME_LIM = 33
  CPX_STAT_CONFLICT_ABORT_IT_LIM = 34
  CPX_STAT_CONFLICT_ABORT_NODE_LIM = 35
  CPX_STAT_CONFLICT_ABORT_OBJ_LIM = 36
  CPX_STAT_CONFLICT_ABORT_MEM_LIM = 37
  CPX_STAT_CONFLICT_ABORT_USER = 38
  CPX_STAT_CONFLICT_ABORT_DETTIME_LIM = 39
  CPX_STAT_BENDERS_NUM_BEST = 41
  CPXMIP_OPTIMAL = 101
  CPXMIP_OPTIMAL_TOL = 102
  CPXMIP_INFEASIBLE = 103
  CPXMIP_SOL_LIM = 104
  CPXMIP_NODE_LIM_FEAS = 105
  CPXMIP_NODE_LIM_INFEAS = 106
  CPXMIP_TIME_LIM_FEAS = 107
  CPXMIP_TIME_LIM_INFEAS = 108
  CPXMIP_FAIL_FEAS = 109
  CPXMIP_FAIL_INFEAS = 110
  CPXMIP_MEM_LIM_FEAS = 111
  CPXMIP_MEM_LIM_INFEAS = 112
  CPXMIP_ABORT_FEAS = 113
  CPXMIP_ABORT_INFEAS = 114
  CPXMIP_OPTIMAL_INFEAS = 115
  CPXMIP_FAIL_FEAS_NO_TREE = 116
  CPXMIP_FAIL_INFEAS_NO_TREE = 117
  CPXMIP_UNBOUNDED = 118
  CPXMIP_INForUNBD = 119
  CPXMIP_FEASIBLE_RELAXED_SUM = 120
  CPXMIP_OPTIMAL_RELAXED_SUM = 121
  CPXMIP_FEASIBLE_RELAXED_INF = 122
  CPXMIP_OPTIMAL_RELAXED_INF = 123
  CPXMIP_FEASIBLE_RELAXED_QUAD = 124
  CPXMIP_OPTIMAL_RELAXED_QUAD = 125
  CPXMIP_ABORT_RELAXED = 126
  CPXMIP_FEASIBLE = 127
  CPXMIP_POPULATESOL_LIM = 128
  CPXMIP_OPTIMAL_POPULATED = 129
  CPXMIP_OPTIMAL_POPULATED_TOL = 130
  CPXMIP_DETTIME_LIM_FEAS = 131
  CPXMIP_DETTIME_LIM_INFEAS = 132
  CPXMIP_ABORT_RELAXATION_UNBOUNDED = 133
  CPX_STAT_MULTIOBJ_OPTIMAL = 301
  CPX_STAT_MULTIOBJ_INFEASIBLE = 302
  CPX_STAT_MULTIOBJ_INForUNBD = 303
  CPX_STAT_MULTIOBJ_UNBOUNDED = 304
  CPX_STAT_MULTIOBJ_NON_OPTIMAL = 305
  CPX_STAT_MULTIOBJ_STOPPED = 306


_conversionDict: dict[CplexStatusCodeEnum, JobSolveStatus] = {
  CplexStatusCodeEnum.CPX_STAT_OPTIMAL: JobSolveStatus.OPTIMAL_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_OPTIMAL: JobSolveStatus.OPTIMAL_SOLUTION,
  CplexStatusCodeEnum.CPX_STAT_UNBOUNDED: JobSolveStatus.UNBOUNDED_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_UNBOUNDED: JobSolveStatus.UNBOUNDED_SOLUTION,
  CplexStatusCodeEnum.CPX_STAT_OPTIMAL_FACE_UNBOUNDED: JobSolveStatus.UNBOUNDED_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_ABORT_RELAXATION_UNBOUNDED: JobSolveStatus.UNBOUNDED_SOLUTION,
  CplexStatusCodeEnum.CPX_STAT_MULTIOBJ_UNBOUNDED: JobSolveStatus.UNBOUNDED_SOLUTION,
  CplexStatusCodeEnum.CPX_STAT_INFEASIBLE: JobSolveStatus.INFEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPX_STAT_OPTIMAL_INFEAS: JobSolveStatus.INFEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_INFEASIBLE: JobSolveStatus.INFEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_NODE_LIM_INFEAS: JobSolveStatus.INFEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_TIME_LIM_INFEAS: JobSolveStatus.INFEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_FAIL_INFEAS: JobSolveStatus.INFEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_MEM_LIM_INFEAS: JobSolveStatus.INFEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_ABORT_INFEAS: JobSolveStatus.INFEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_OPTIMAL_INFEAS: JobSolveStatus.INFEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_FAIL_INFEAS_NO_TREE: JobSolveStatus.INFEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_DETTIME_LIM_INFEAS: JobSolveStatus.INFEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPX_STAT_MULTIOBJ_INFEASIBLE: JobSolveStatus.INFEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPX_STAT_INForUNBD: JobSolveStatus.INFEASIBLE_OR_UNBOUNDED_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_INForUNBD: JobSolveStatus.INFEASIBLE_OR_UNBOUNDED_SOLUTION,
  CplexStatusCodeEnum.CPX_STAT_MULTIOBJ_INForUNBD: JobSolveStatus.INFEASIBLE_OR_UNBOUNDED_SOLUTION,
  CplexStatusCodeEnum.CPX_STAT_FEASIBLE: JobSolveStatus.FEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_FEASIBLE: JobSolveStatus.FEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_NODE_LIM_FEAS: JobSolveStatus.FEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_TIME_LIM_FEAS: JobSolveStatus.FEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_FAIL_FEAS: JobSolveStatus.FEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_MEM_LIM_FEAS: JobSolveStatus.FEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_ABORT_FEAS: JobSolveStatus.FEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_FAIL_FEAS_NO_TREE: JobSolveStatus.FEASIBLE_SOLUTION,
  CplexStatusCodeEnum.CPXMIP_DETTIME_LIM_FEAS: JobSolveStatus.FEASIBLE_SOLUTION,
}


def convertStatus(status: CplexStatusCodeEnum) -> JobSolveStatus:
  return _conversionDict.get(status, JobSolveStatus.UNKNOWN)
